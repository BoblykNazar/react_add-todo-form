{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","helpers.ts","components/AddPostForm/AddPostForm.tsx","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","cn","completed","title","TodoList","todos","map","username","userId","getUserById","users","find","getNewId","length","todosIndex","Math","max","TITLE_CORRECTED_PATTERN","AddPostForm","addTodo","useState","setTitle","selectedId","setSelectedId","isCompleted","isInputError","setIsInputError","isSelectError","setIsSelectError","isValid","trim","isInputvalid","isSelectvalid","onSubmit","event","preventDefault","action","method","htmlFor","type","value","onChange","correctedValue","target","replace","placeholder","disabled","App","todosFromServer","setTodos","usersFromServer","todosWithUsers","getTodosWithUsers","todoTitle","currentTodos","newTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8fe8f11d.chunk.js","sourcesContent":["import { FC } from 'react';\nimport { User } from '../../types/interfaces';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: FC<Props> = ({ user }) => {\n  return (\n    <a\n      className=\"UserInfo\"\n      href={`mailto:${user.email}`}\n    >\n      {user.name}\n    </a>\n  );\n};\n","import cn from 'classnames';\nimport { FC } from 'react';\nimport { TodoWithUser } from '../../types/interfaces';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: TodoWithUser,\n};\n\nexport const TodoInfo: FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={cn('TodoInfo',\n        { 'TodoInfo--completed': todo.completed })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n      {todo.user && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import { FC } from 'react';\nimport { TodoWithUser } from '../../types/interfaces';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: TodoWithUser[],\n};\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          key={todo.id}\n          todo={todo}\n        />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { Todo, TodoWithUser, User } from './types/interfaces';\n\nconst getUserById = (users: User[], id: number): User | null => (\n  users.find((user) => user.id === id) || null\n);\n\nexport const getTodosWithUsers = (\n  todos: Todo[],\n  users: User[],\n): TodoWithUser[] => (\n  todos.map(todo => ({\n    ...todo,\n    user: getUserById(users, todo.userId),\n  }))\n);\n\nexport const getNewId = (todos: Todo[]): number => {\n  if (!todos.length) {\n    return 1;\n  }\n\n  const todosIndex = todos.map(todo => todo.id);\n  const maxTodosIndex = Math.max(...todosIndex);\n\n  return maxTodosIndex + 1;\n};\n","import { FC, useState } from 'react';\nimport { User } from '../../types/interfaces';\n\ntype Props = {\n  addTodo: (\n    todoTitle: string,\n    userId: number,\n    completed: boolean,\n  ) => void;\n  users: User[],\n};\n\nconst TITLE_CORRECTED_PATTERN = /[^a-zA-Z0-9\\s\\u0400-\\u04FF]/gu;\n\nexport const AddPostForm: FC<Props> = ({ addTodo, users }) => {\n  const [title, setTitle] = useState('');\n  const [selectedId, setSelectedId] = useState(0);\n  const [isCompleted] = useState(false);\n\n  const [isInputError, setIsInputError] = useState('');\n  const [isSelectError, setIsSelectError] = useState('');\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const correctedValue = (event.target.value)\n      .replace(TITLE_CORRECTED_PATTERN, '');\n\n    setTitle(correctedValue);\n  };\n\n  const clearForm = () => {\n    setTitle('');\n    setSelectedId(0);\n    setIsInputError('');\n    setIsSelectError('');\n  };\n\n  const isValid = !title.trim() || !selectedId;\n  const isInputvalid = isInputError && !title;\n  const isSelectvalid = isSelectError && selectedId === 0;\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (isValid) {\n      setIsInputError('Please enter a title');\n      setIsSelectError('Please choose a user');\n\n      return;\n    }\n\n    addTodo(title, selectedId, isCompleted);\n\n    clearForm();\n  };\n\n  return (\n    <form\n      onSubmit={onSubmit}\n      action=\"/api/todos\"\n      method=\"POST\"\n    >\n      <div className=\"field\">\n        <label htmlFor=\"form-title\">Title: </label>\n        <input\n          type=\"text\"\n          id=\"form-title\"\n          data-cy=\"titleInput\"\n          value={title}\n          onChange={handleInputChange}\n          placeholder=\"Enter a title\"\n        />\n        {isInputvalid && (\n          <span className=\"error\">{isInputError}</span>\n        )}\n\n      </div>\n\n      <div className=\"field\">\n        <label htmlFor=\"form-select-user\">User: </label>\n        <select\n          id=\"form-select-user\"\n          data-cy=\"userSelect\"\n          value={selectedId}\n          onChange={event => setSelectedId(+event.target.value)}\n        >\n          <option\n            value=\"0\"\n            disabled\n          >\n            Choose a user\n          </option>\n          {users.map(user => (\n            <option\n              key={user.id}\n              value={user.id}\n            >\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        {isSelectvalid && (\n          <span className=\"error\">{isSelectError}</span>\n        )}\n      </div>\n\n      <button\n        type=\"submit\"\n        data-cy=\"submitButton\"\n      >\n        Add\n      </button>\n    </form>\n  );\n};\n","import { useState } from 'react';\n\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { getNewId, getTodosWithUsers } from './helpers';\nimport { AddPostForm } from './components/AddPostForm';\nimport { Todo } from './types/interfaces';\n\nexport const App = () => {\n  const [todos, setTodos] = useState(todosFromServer);\n  const [users] = useState(usersFromServer);\n\n  const todosWithUsers = getTodosWithUsers(todos, users);\n\n  const addTodo = (\n    todoTitle: string,\n    userId: number,\n    completed: boolean,\n  ) => {\n    setTodos((currentTodos) => {\n      const newTodo: Todo = {\n        id: getNewId(currentTodos),\n        title: todoTitle,\n        completed,\n        userId,\n      };\n\n      return [\n        ...currentTodos,\n        newTodo,\n      ];\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <AddPostForm\n        addTodo={addTodo}\n        users={users}\n      />\n\n      <TodoList\n        todos={todosWithUsers}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}